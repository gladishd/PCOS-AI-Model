import matplotlib.pyplot as plt
from matplotlib.gridspec import GridSpec
import numpy as np
from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import ImageFormatter
from pygments.styles import monokai
import os
import logging
import traceback

""" Here I think the best thing to do would be to make it possible to set up this
simplistic form for the logger. All it would take is a couple of tweaks and then
the logging configuration would be "finished". """
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s - %(message)s"
)
logger = logging.getLogger(__name__)


def create_plot_with_code(plot_func, code_snippet, title, filename, figsize=(15, 10)):
    """
    Make a figure that combines the plot as well as its code, handle ALL errors and do the logging. What exactly are we doing? well here, it's creating a figure that combines a Matplotlib plot (generated by the `plot_func`) as well as a snippet of code that we display "underneath it all", which we both save as a single image file..

    Parameters are:
        -----plot_func : callable. This is a function that takes one argument (an Axes object) and then renders ..a plot on that argument.
        code_snippet : str
            This is the Python code that we display as text in the bottom portion of the figure.
        title : str
            This is the main title that we place at the very top of that figure
        filename : str
            And here we have the path (which includes the filename by the way) where the final image, will be saved...by us.
        figsize : tuple of (float, float), optional
            The created figure has a size that is measured in terms of inches, by default (15, 10).

    Raises------Exception   Any exception, that occurs during the creation of an image..(plotting or saving file(s)), is logged and then re-raised to allow higher-level handling.

    Notes-----1. This function uses Pygments to convert the given code snippet into an image, then places that code text below a plot in a single figure.
    2. Temporary code snippet images are generated@! And then automatically, removed (cleanup that's called)..and THEN
    3. Logging, is used to captivate in the eye of the user, some errors or even confirm successful generation of images.
    """
    # The images directory ideally exists..this is how we make it possible.
    os.makedirs('images', exist_ok=True)

    """ Then we take the path of the image and then "for that" we set up the temporary code. """
    code_image_path = 'images/temp_code.png'

    try:
        # 1. Using Pygments, create a code snippet and then create an image of it.!
        formatter = ImageFormatter(
            style='monokai',
            line_numbers=True,
            font_size=14,
            line_pad=3
        )
        code_image = highlight(code_snippet, PythonLexer(), formatter)
        with open(code_image_path, 'wb') as f:
            f.write(code_image)

        """ 2. Generate the main figure with a plot at the top as well as the
        code snippet, at the bottom."""
        fig = plt.figure(figsize=figsize)
        gs = GridSpec(2, 1, height_ratios=[2, 1])

        # Add the title to the figure
        fig.suptitle(title, fontsize=16, y=0.95)

        # In the top sub-plot create the plot.
        ax1 = fig.add_subplot(gs[0])
        plot_func(ax1)

        # Then, in the BOTTOM subplot create a code snipping..
        ax2 = fig.add_subplot(gs[1])
        ax2.text(
            0.05, 0.95,
            code_snippet,
            family='monospace',
            fontsize=8,
            verticalalignment='top',
            horizontalalignment='left',
            transform=ax2.transAxes,
            bbox=dict(facecolor='#272822', edgecolor='none', alpha=0.6)
        )
        ax2.axis('off')

        plt.tight_layout()
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        plt.close()

        logger.info(
            f"We have successfully created plot and code snippet image: {filename}")

    except Exception as e:
        # We can also log the errors with the stack trace to make debugging easier!
        logger.error(
            "Error in create_plot_with_code() while generating %s:\n%s",
            filename,
            traceback.format_exc()
        )
        """ Re-raise an exception such that callers at a higher-level can
        also handle that if need be.."""
        raise e

    finally:
        # Clean up the file as it is TEMPORARY
        if os.path.exists(code_image_path):
            try:
                os.remove(code_image_path)
            except OSError as cleanup_error:
                logger.warning(
                    f"We failed to remove the temporary code image {code_image_path}: {cleanup_error}"
                )
